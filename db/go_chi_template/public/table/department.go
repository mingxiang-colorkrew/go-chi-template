//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Department = newDepartmentTable("public", "department", "")

type departmentTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	Name      postgres.ColumnString
	CustomID  postgres.ColumnString
	TenantID  postgres.ColumnInteger
	Hierarchy postgres.ColumnString
	CreatedAt postgres.ColumnTimestamp
	UpdatedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DepartmentTable struct {
	departmentTable

	EXCLUDED departmentTable
}

// AS creates new DepartmentTable with assigned alias
func (a DepartmentTable) AS(alias string) *DepartmentTable {
	return newDepartmentTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DepartmentTable with assigned schema name
func (a DepartmentTable) FromSchema(schemaName string) *DepartmentTable {
	return newDepartmentTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DepartmentTable with assigned table prefix
func (a DepartmentTable) WithPrefix(prefix string) *DepartmentTable {
	return newDepartmentTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DepartmentTable with assigned table suffix
func (a DepartmentTable) WithSuffix(suffix string) *DepartmentTable {
	return newDepartmentTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDepartmentTable(schemaName, tableName, alias string) *DepartmentTable {
	return &DepartmentTable{
		departmentTable: newDepartmentTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newDepartmentTableImpl("", "excluded", ""),
	}
}

func newDepartmentTableImpl(schemaName, tableName, alias string) departmentTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		NameColumn      = postgres.StringColumn("name")
		CustomIDColumn  = postgres.StringColumn("custom_id")
		TenantIDColumn  = postgres.IntegerColumn("tenant_id")
		HierarchyColumn = postgres.StringColumn("hierarchy")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		UpdatedAtColumn = postgres.TimestampColumn("updated_at")
		allColumns      = postgres.ColumnList{IDColumn, NameColumn, CustomIDColumn, TenantIDColumn, HierarchyColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{NameColumn, CustomIDColumn, TenantIDColumn, HierarchyColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return departmentTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Name:      NameColumn,
		CustomID:  CustomIDColumn,
		TenantID:  TenantIDColumn,
		Hierarchy: HierarchyColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
