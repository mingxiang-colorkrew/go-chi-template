// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package oapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// Defines values for PostApiV1UserJSONBodyRole.
const (
	Admin  PostApiV1UserJSONBodyRole = "admin"
	Normal PostApiV1UserJSONBodyRole = "normal"
	Super  PostApiV1UserJSONBodyRole = "super"
)

// Tenant defines model for Tenant.
type Tenant struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Id        string     `json:"id"`
	Name      string     `json:"name"`
	ShortCode string     `json:"shortCode"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	UserCount *int       `json:"userCount,omitempty"`
}

// TenantCreateValidationError defines model for TenantCreateValidationError.
type TenantCreateValidationError struct {
	Name *struct {
		MaxLen     *string `json:"maxLen,omitempty"`
		MinLen     *string `json:"minLen,omitempty"`
		Required   *string `json:"required,omitempty"`
		UniqueName *string `json:"uniqueName,omitempty"`
	} `json:"name,omitempty"`
	ShortCode *struct {
		AlphaNum        *string `json:"alphaNum,omitempty"`
		MaxLen          *string `json:"maxLen,omitempty"`
		MinLen          *string `json:"minLen,omitempty"`
		Required        *string `json:"required,omitempty"`
		UniqueShortCode *string `json:"uniqueShortCode,omitempty"`
	} `json:"shortCode,omitempty"`
}

// User defines model for User.
type User struct {
	Email  *string `json:"email,omitempty"`
	Id     string  `json:"id"`
	Name   *string `json:"name,omitempty"`
	Role   *string `json:"role,omitempty"`
	Tenant *Tenant `json:"tenant,omitempty"`
}

// UserCreateValidationError defines model for UserCreateValidationError.
type UserCreateValidationError struct {
	Email *struct {
		Email    *string `json:"email,omitempty"`
		MaxLen   *string `json:"maxLen,omitempty"`
		Required *string `json:"required,omitempty"`
	} `json:"email,omitempty"`
	Name *struct {
		MaxLen   *string `json:"maxLen,omitempty"`
		MinLen   *string `json:"minLen,omitempty"`
		Required *string `json:"required,omitempty"`
	} `json:"name,omitempty"`
	Role *struct {
		InvalidRole *string `json:"invalidRole,omitempty"`
	} `json:"role,omitempty"`
	TenantId *struct {
		TenantExists *string `json:"tenantExists,omitempty"`
	} `json:"tenantId,omitempty"`
}

// PostApiV1TenantJSONBody defines parameters for PostApiV1Tenant.
type PostApiV1TenantJSONBody struct {
	Name      string `json:"name"`
	ShortCode string `json:"shortCode"`
}

// GetApiV1UserJSONBody defines parameters for GetApiV1User.
type GetApiV1UserJSONBody struct {
	TenantId string `json:"tenantId"`
}

// PostApiV1UserJSONBody defines parameters for PostApiV1User.
type PostApiV1UserJSONBody struct {
	Email    string                    `json:"email"`
	Name     *string                   `json:"name"`
	Role     PostApiV1UserJSONBodyRole `json:"role"`
	TenantId string                    `json:"tenantId"`
}

// PostApiV1UserJSONBodyRole defines parameters for PostApiV1User.
type PostApiV1UserJSONBodyRole string

// PostApiV1TenantJSONRequestBody defines body for PostApiV1Tenant for application/json ContentType.
type PostApiV1TenantJSONRequestBody PostApiV1TenantJSONBody

// GetApiV1UserJSONRequestBody defines body for GetApiV1User for application/json ContentType.
type GetApiV1UserJSONRequestBody GetApiV1UserJSONBody

// PostApiV1UserJSONRequestBody defines body for PostApiV1User for application/json ContentType.
type PostApiV1UserJSONRequestBody PostApiV1UserJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiV1Tenant request
	GetApiV1Tenant(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1Tenant request with any body
	PostApiV1TenantWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Tenant(ctx context.Context, body PostApiV1TenantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1TenantTenantId request
	GetApiV1TenantTenantId(ctx context.Context, tenantId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1User request with any body
	GetApiV1UserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetApiV1User(ctx context.Context, body GetApiV1UserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1User request with any body
	PostApiV1UserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1User(ctx context.Context, body PostApiV1UserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1UserUserId request with any body
	GetApiV1UserUserIdWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiV1Tenant(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1TenantRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1TenantWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1TenantRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Tenant(ctx context.Context, body PostApiV1TenantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1TenantRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1TenantTenantId(ctx context.Context, tenantId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1TenantTenantIdRequest(c.Server, tenantId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1UserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1UserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1User(ctx context.Context, body GetApiV1UserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1UserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1UserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1UserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1User(ctx context.Context, body PostApiV1UserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1UserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1UserUserIdWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1UserUserIdRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiV1TenantRequest generates requests for GetApiV1Tenant
func NewGetApiV1TenantRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tenant")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1TenantRequest calls the generic PostApiV1Tenant builder with application/json body
func NewPostApiV1TenantRequest(server string, body PostApiV1TenantJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1TenantRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1TenantRequestWithBody generates requests for PostApiV1Tenant with any type of body
func NewPostApiV1TenantRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tenant")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1TenantTenantIdRequest generates requests for GetApiV1TenantTenantId
func NewGetApiV1TenantTenantIdRequest(server string, tenantId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tenant/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1UserRequest calls the generic GetApiV1User builder with application/json body
func NewGetApiV1UserRequest(server string, body GetApiV1UserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetApiV1UserRequestWithBody(server, "application/json", bodyReader)
}

// NewGetApiV1UserRequestWithBody generates requests for GetApiV1User with any type of body
func NewGetApiV1UserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1UserRequest calls the generic PostApiV1User builder with application/json body
func NewPostApiV1UserRequest(server string, body PostApiV1UserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1UserRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1UserRequestWithBody generates requests for PostApiV1User with any type of body
func NewPostApiV1UserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1UserUserIdRequestWithBody generates requests for GetApiV1UserUserId with any type of body
func NewGetApiV1UserUserIdRequestWithBody(server string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiV1Tenant request
	GetApiV1TenantWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1TenantResponse, error)

	// PostApiV1Tenant request with any body
	PostApiV1TenantWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1TenantResponse, error)

	PostApiV1TenantWithResponse(ctx context.Context, body PostApiV1TenantJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1TenantResponse, error)

	// GetApiV1TenantTenantId request
	GetApiV1TenantTenantIdWithResponse(ctx context.Context, tenantId string, reqEditors ...RequestEditorFn) (*GetApiV1TenantTenantIdResponse, error)

	// GetApiV1User request with any body
	GetApiV1UserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetApiV1UserResponse, error)

	GetApiV1UserWithResponse(ctx context.Context, body GetApiV1UserJSONRequestBody, reqEditors ...RequestEditorFn) (*GetApiV1UserResponse, error)

	// PostApiV1User request with any body
	PostApiV1UserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1UserResponse, error)

	PostApiV1UserWithResponse(ctx context.Context, body PostApiV1UserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1UserResponse, error)

	// GetApiV1UserUserId request with any body
	GetApiV1UserUserIdWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetApiV1UserUserIdResponse, error)
}

type GetApiV1TenantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Tenants []Tenant `json:"tenants"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1TenantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1TenantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1TenantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Tenant Tenant `json:"tenant"`
	}
	JSON400 *struct {
		Data         TenantCreateValidationError `json:"data"`
		ErrorCode    string                      `json:"errorCode"`
		ErrorMessage string                      `json:"errorMessage"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1TenantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1TenantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1TenantTenantIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Tenant Tenant `json:"tenant"`
	}
	JSON404 *struct {
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1TenantTenantIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1TenantTenantIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1UserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Users []User `json:"users"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1UserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1UserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1UserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		User User `json:"user"`
	}
	JSON400 *struct {
		Data         UserCreateValidationError `json:"data"`
		ErrorCode    string                    `json:"errorCode"`
		ErrorMessage string                    `json:"errorMessage"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1UserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1UserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1UserUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		User User `json:"user"`
	}
	JSON404 *struct {
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1UserUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1UserUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiV1TenantWithResponse request returning *GetApiV1TenantResponse
func (c *ClientWithResponses) GetApiV1TenantWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1TenantResponse, error) {
	rsp, err := c.GetApiV1Tenant(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1TenantResponse(rsp)
}

// PostApiV1TenantWithBodyWithResponse request with arbitrary body returning *PostApiV1TenantResponse
func (c *ClientWithResponses) PostApiV1TenantWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1TenantResponse, error) {
	rsp, err := c.PostApiV1TenantWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1TenantResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1TenantWithResponse(ctx context.Context, body PostApiV1TenantJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1TenantResponse, error) {
	rsp, err := c.PostApiV1Tenant(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1TenantResponse(rsp)
}

// GetApiV1TenantTenantIdWithResponse request returning *GetApiV1TenantTenantIdResponse
func (c *ClientWithResponses) GetApiV1TenantTenantIdWithResponse(ctx context.Context, tenantId string, reqEditors ...RequestEditorFn) (*GetApiV1TenantTenantIdResponse, error) {
	rsp, err := c.GetApiV1TenantTenantId(ctx, tenantId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1TenantTenantIdResponse(rsp)
}

// GetApiV1UserWithBodyWithResponse request with arbitrary body returning *GetApiV1UserResponse
func (c *ClientWithResponses) GetApiV1UserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetApiV1UserResponse, error) {
	rsp, err := c.GetApiV1UserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1UserResponse(rsp)
}

func (c *ClientWithResponses) GetApiV1UserWithResponse(ctx context.Context, body GetApiV1UserJSONRequestBody, reqEditors ...RequestEditorFn) (*GetApiV1UserResponse, error) {
	rsp, err := c.GetApiV1User(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1UserResponse(rsp)
}

// PostApiV1UserWithBodyWithResponse request with arbitrary body returning *PostApiV1UserResponse
func (c *ClientWithResponses) PostApiV1UserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1UserResponse, error) {
	rsp, err := c.PostApiV1UserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1UserResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1UserWithResponse(ctx context.Context, body PostApiV1UserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1UserResponse, error) {
	rsp, err := c.PostApiV1User(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1UserResponse(rsp)
}

// GetApiV1UserUserIdWithBodyWithResponse request with arbitrary body returning *GetApiV1UserUserIdResponse
func (c *ClientWithResponses) GetApiV1UserUserIdWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetApiV1UserUserIdResponse, error) {
	rsp, err := c.GetApiV1UserUserIdWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1UserUserIdResponse(rsp)
}

// ParseGetApiV1TenantResponse parses an HTTP response from a GetApiV1TenantWithResponse call
func ParseGetApiV1TenantResponse(rsp *http.Response) (*GetApiV1TenantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1TenantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Tenants []Tenant `json:"tenants"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1TenantResponse parses an HTTP response from a PostApiV1TenantWithResponse call
func ParsePostApiV1TenantResponse(rsp *http.Response) (*PostApiV1TenantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1TenantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Tenant Tenant `json:"tenant"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Data         TenantCreateValidationError `json:"data"`
			ErrorCode    string                      `json:"errorCode"`
			ErrorMessage string                      `json:"errorMessage"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetApiV1TenantTenantIdResponse parses an HTTP response from a GetApiV1TenantTenantIdWithResponse call
func ParseGetApiV1TenantTenantIdResponse(rsp *http.Response) (*GetApiV1TenantTenantIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1TenantTenantIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Tenant Tenant `json:"tenant"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetApiV1UserResponse parses an HTTP response from a GetApiV1UserWithResponse call
func ParseGetApiV1UserResponse(rsp *http.Response) (*GetApiV1UserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1UserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Users []User `json:"users"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1UserResponse parses an HTTP response from a PostApiV1UserWithResponse call
func ParsePostApiV1UserResponse(rsp *http.Response) (*PostApiV1UserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1UserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			User User `json:"user"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Data         UserCreateValidationError `json:"data"`
			ErrorCode    string                    `json:"errorCode"`
			ErrorMessage string                    `json:"errorMessage"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetApiV1UserUserIdResponse parses an HTTP response from a GetApiV1UserUserIdWithResponse call
func ParseGetApiV1UserUserIdResponse(rsp *http.Response) (*GetApiV1UserUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1UserUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			User User `json:"user"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/v1/tenant)
	GetApiV1Tenant(w http.ResponseWriter, r *http.Request)

	// (POST /api/v1/tenant)
	PostApiV1Tenant(w http.ResponseWriter, r *http.Request)
	// Get Tenant By ID
	// (GET /api/v1/tenant/{tenantId})
	GetApiV1TenantTenantId(w http.ResponseWriter, r *http.Request, tenantId string)
	// Get all users
	// (GET /api/v1/user)
	GetApiV1User(w http.ResponseWriter, r *http.Request)

	// (POST /api/v1/user)
	PostApiV1User(w http.ResponseWriter, r *http.Request)
	// Get User By ID
	// (GET /api/v1/user/{userId})
	GetApiV1UserUserId(w http.ResponseWriter, r *http.Request, userId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetApiV1Tenant operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Tenant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1Tenant(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiV1Tenant operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Tenant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1Tenant(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1TenantTenantId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1TenantTenantId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "tenantId" -------------
	var tenantId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, chi.URLParam(r, "tenantId"), &tenantId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1TenantTenantId(w, r, tenantId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1User operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1User(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1User(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiV1User operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1User(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1User(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1UserUserId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1UserUserId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1UserUserId(w, r, userId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/tenant", wrapper.GetApiV1Tenant)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/tenant", wrapper.PostApiV1Tenant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/tenant/{tenantId}", wrapper.GetApiV1TenantTenantId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/user", wrapper.GetApiV1User)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/user", wrapper.PostApiV1User)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/user/{userId}", wrapper.GetApiV1UserUserId)
	})

	return r
}

type GetApiV1TenantRequestObject struct {
}

type GetApiV1TenantResponseObject interface {
	VisitGetApiV1TenantResponse(w http.ResponseWriter) error
}

type GetApiV1Tenant200JSONResponse struct {
	Tenants []Tenant `json:"tenants"`
}

func (response GetApiV1Tenant200JSONResponse) VisitGetApiV1TenantResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiV1TenantRequestObject struct {
	Body *PostApiV1TenantJSONRequestBody
}

type PostApiV1TenantResponseObject interface {
	VisitPostApiV1TenantResponse(w http.ResponseWriter) error
}

type PostApiV1Tenant200JSONResponse struct {
	Tenant Tenant `json:"tenant"`
}

func (response PostApiV1Tenant200JSONResponse) VisitPostApiV1TenantResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiV1Tenant400JSONResponse struct {
	Data         TenantCreateValidationError `json:"data"`
	ErrorCode    string                      `json:"errorCode"`
	ErrorMessage string                      `json:"errorMessage"`
}

func (response PostApiV1Tenant400JSONResponse) VisitPostApiV1TenantResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetApiV1TenantTenantIdRequestObject struct {
	TenantId string `json:"tenantId"`
}

type GetApiV1TenantTenantIdResponseObject interface {
	VisitGetApiV1TenantTenantIdResponse(w http.ResponseWriter) error
}

type GetApiV1TenantTenantId200JSONResponse struct {
	Tenant Tenant `json:"tenant"`
}

func (response GetApiV1TenantTenantId200JSONResponse) VisitGetApiV1TenantTenantIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiV1TenantTenantId404JSONResponse struct {
	Message string `json:"message"`
}

func (response GetApiV1TenantTenantId404JSONResponse) VisitGetApiV1TenantTenantIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetApiV1UserRequestObject struct {
	Body *GetApiV1UserJSONRequestBody
}

type GetApiV1UserResponseObject interface {
	VisitGetApiV1UserResponse(w http.ResponseWriter) error
}

type GetApiV1User200JSONResponse struct {
	Users []User `json:"users"`
}

func (response GetApiV1User200JSONResponse) VisitGetApiV1UserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiV1UserRequestObject struct {
	Body *PostApiV1UserJSONRequestBody
}

type PostApiV1UserResponseObject interface {
	VisitPostApiV1UserResponse(w http.ResponseWriter) error
}

type PostApiV1User200JSONResponse struct {
	User User `json:"user"`
}

func (response PostApiV1User200JSONResponse) VisitPostApiV1UserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiV1User400JSONResponse struct {
	Data         UserCreateValidationError `json:"data"`
	ErrorCode    string                    `json:"errorCode"`
	ErrorMessage string                    `json:"errorMessage"`
}

func (response PostApiV1User400JSONResponse) VisitPostApiV1UserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetApiV1UserUserIdRequestObject struct {
	UserId string `json:"userId"`
}

type GetApiV1UserUserIdResponseObject interface {
	VisitGetApiV1UserUserIdResponse(w http.ResponseWriter) error
}

type GetApiV1UserUserId200JSONResponse struct {
	User User `json:"user"`
}

func (response GetApiV1UserUserId200JSONResponse) VisitGetApiV1UserUserIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiV1UserUserId404JSONResponse struct {
	Message string `json:"message"`
}

func (response GetApiV1UserUserId404JSONResponse) VisitGetApiV1UserUserIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /api/v1/tenant)
	GetApiV1Tenant(ctx context.Context, request GetApiV1TenantRequestObject) (GetApiV1TenantResponseObject, error)

	// (POST /api/v1/tenant)
	PostApiV1Tenant(ctx context.Context, request PostApiV1TenantRequestObject) (PostApiV1TenantResponseObject, error)
	// Get Tenant By ID
	// (GET /api/v1/tenant/{tenantId})
	GetApiV1TenantTenantId(ctx context.Context, request GetApiV1TenantTenantIdRequestObject) (GetApiV1TenantTenantIdResponseObject, error)
	// Get all users
	// (GET /api/v1/user)
	GetApiV1User(ctx context.Context, request GetApiV1UserRequestObject) (GetApiV1UserResponseObject, error)

	// (POST /api/v1/user)
	PostApiV1User(ctx context.Context, request PostApiV1UserRequestObject) (PostApiV1UserResponseObject, error)
	// Get User By ID
	// (GET /api/v1/user/{userId})
	GetApiV1UserUserId(ctx context.Context, request GetApiV1UserUserIdRequestObject) (GetApiV1UserUserIdResponseObject, error)
}

type StrictHandlerFunc func(ctx context.Context, w http.ResponseWriter, r *http.Request, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetApiV1Tenant operation middleware
func (sh *strictHandler) GetApiV1Tenant(w http.ResponseWriter, r *http.Request) {
	var request GetApiV1TenantRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiV1Tenant(ctx, request.(GetApiV1TenantRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiV1Tenant")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiV1TenantResponseObject); ok {
		if err := validResponse.VisitGetApiV1TenantResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PostApiV1Tenant operation middleware
func (sh *strictHandler) PostApiV1Tenant(w http.ResponseWriter, r *http.Request) {
	var request PostApiV1TenantRequestObject

	var body PostApiV1TenantJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiV1Tenant(ctx, request.(PostApiV1TenantRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiV1Tenant")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiV1TenantResponseObject); ok {
		if err := validResponse.VisitPostApiV1TenantResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetApiV1TenantTenantId operation middleware
func (sh *strictHandler) GetApiV1TenantTenantId(w http.ResponseWriter, r *http.Request, tenantId string) {
	var request GetApiV1TenantTenantIdRequestObject

	request.TenantId = tenantId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiV1TenantTenantId(ctx, request.(GetApiV1TenantTenantIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiV1TenantTenantId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiV1TenantTenantIdResponseObject); ok {
		if err := validResponse.VisitGetApiV1TenantTenantIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetApiV1User operation middleware
func (sh *strictHandler) GetApiV1User(w http.ResponseWriter, r *http.Request) {
	var request GetApiV1UserRequestObject

	var body GetApiV1UserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiV1User(ctx, request.(GetApiV1UserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiV1User")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiV1UserResponseObject); ok {
		if err := validResponse.VisitGetApiV1UserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PostApiV1User operation middleware
func (sh *strictHandler) PostApiV1User(w http.ResponseWriter, r *http.Request) {
	var request PostApiV1UserRequestObject

	var body PostApiV1UserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiV1User(ctx, request.(PostApiV1UserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiV1User")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiV1UserResponseObject); ok {
		if err := validResponse.VisitPostApiV1UserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetApiV1UserUserId operation middleware
func (sh *strictHandler) GetApiV1UserUserId(w http.ResponseWriter, r *http.Request, userId string) {
	var request GetApiV1UserUserIdRequestObject

	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiV1UserUserId(ctx, request.(GetApiV1UserUserIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiV1UserUserId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiV1UserUserIdResponseObject); ok {
		if err := validResponse.VisitGetApiV1UserUserIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}
